// this file is generated via daScript automatic C++ binder
// all user modifications will be lost after this file is re-generated

addConstant<int32_t>(*this,"BGFX_STATE_DEPTH_TEST_SHIFT",int32_t(4));
addConstant<int32_t>(*this,"BGFX_STATE_BLEND_SHIFT",int32_t(12));
addConstant<int32_t>(*this,"BGFX_STATE_BLEND_EQUATION_SHIFT",int32_t(28));
addConstant<int32_t>(*this,"BGFX_STATE_CULL_SHIFT",int32_t(36));
addConstant<int32_t>(*this,"BGFX_STATE_ALPHA_REF_SHIFT",int32_t(40));
addConstant<int32_t>(*this,"BGFX_STATE_PT_SHIFT",int32_t(48));
addConstant<int32_t>(*this,"BGFX_STATE_POINT_SIZE_SHIFT",int32_t(52));
addConstant<int32_t>(*this,"BGFX_STATE_RESERVED_SHIFT",int32_t(61));
addConstant<int32_t>(*this,"BGFX_STENCIL_FUNC_REF_SHIFT",int32_t(0));
addConstant<int32_t>(*this,"BGFX_STENCIL_FUNC_RMASK_SHIFT",int32_t(8));
addConstant<int32_t>(*this,"BGFX_STENCIL_TEST_SHIFT",int32_t(16));
addConstant<int32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_SHIFT",int32_t(20));
addConstant<int32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_SHIFT",int32_t(24));
addConstant<int32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_SHIFT",int32_t(28));
addConstant<int32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_SHIFT",int32_t(0));
addConstant<int32_t>(*this,"BGFX_BUFFER_COMPUTE_TYPE_SHIFT",int32_t(4));
addConstant<int32_t>(*this,"BGFX_TEXTURE_RT_MSAA_SHIFT",int32_t(36));
addConstant<int32_t>(*this,"BGFX_TEXTURE_RT_SHIFT",int32_t(36));
addConstant<int32_t>(*this,"BGFX_SAMPLER_U_SHIFT",int32_t(0));
addConstant<int32_t>(*this,"BGFX_SAMPLER_V_SHIFT",int32_t(2));
addConstant<int32_t>(*this,"BGFX_SAMPLER_W_SHIFT",int32_t(4));
addConstant<int32_t>(*this,"BGFX_SAMPLER_MIN_SHIFT",int32_t(6));
addConstant<int32_t>(*this,"BGFX_SAMPLER_MAG_SHIFT",int32_t(8));
addConstant<int32_t>(*this,"BGFX_SAMPLER_MIP_SHIFT",int32_t(10));
addConstant<int32_t>(*this,"BGFX_SAMPLER_COMPARE_SHIFT",int32_t(16));
addConstant<int32_t>(*this,"BGFX_SAMPLER_BORDER_COLOR_SHIFT",int32_t(24));
addConstant<int32_t>(*this,"BGFX_SAMPLER_RESERVED_SHIFT",int32_t(28));
addConstant<int32_t>(*this,"BGFX_RESET_MSAA_SHIFT",int32_t(4));
addConstant<int32_t>(*this,"BGFX_RESET_FULLSCREEN_SHIFT",int32_t(0));
addConstant<int32_t>(*this,"BGFX_RESET_RESERVED_SHIFT",int32_t(31));
addConstant<uint32_t>(*this,"BGFX_DISCARD_NONE",uint32_t(0x00u));
addConstant<uint32_t>(*this,"BGFX_DISCARD_BINDINGS",uint32_t(0x01u));
addConstant<uint32_t>(*this,"BGFX_DISCARD_INDEX_BUFFER",uint32_t(0x02u));
addConstant<uint32_t>(*this,"BGFX_DISCARD_INSTANCE_DATA",uint32_t(0x04u));
addConstant<uint32_t>(*this,"BGFX_DISCARD_STATE",uint32_t(0x08u));
addConstant<uint32_t>(*this,"BGFX_DISCARD_TRANSFORM",uint32_t(0x10u));
addConstant<uint32_t>(*this,"BGFX_DISCARD_VERTEX_STREAMS",uint32_t(0x20u));
addConstant<uint32_t>(*this,"BGFX_DISCARD_ALL",uint32_t(0xffu));
addConstant<uint32_t>(*this,"BGFX_RESOLVE_NONE",uint32_t(0x00u));
addConstant<uint32_t>(*this,"BGFX_RESOLVE_AUTO_GEN_MIPS",uint32_t(0x01u));
addConstant<uint32_t>(*this,"BGFX_CUBE_MAP_POSITIVE_X",uint32_t(0x00u));
addConstant<uint32_t>(*this,"BGFX_CUBE_MAP_NEGATIVE_X",uint32_t(0x01u));
addConstant<uint32_t>(*this,"BGFX_CUBE_MAP_POSITIVE_Y",uint32_t(0x02u));
addConstant<uint32_t>(*this,"BGFX_CUBE_MAP_NEGATIVE_Y",uint32_t(0x03u));
addConstant<uint32_t>(*this,"BGFX_CUBE_MAP_POSITIVE_Z",uint32_t(0x04u));
addConstant<uint32_t>(*this,"BGFX_CUBE_MAP_NEGATIVE_Z",uint32_t(0x05u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_NONE",uint32_t(0x0000u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_COLOR",uint32_t(0x0001u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DEPTH",uint32_t(0x0002u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_STENCIL",uint32_t(0x0004u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_COLOR_0",uint32_t(0x0008u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_COLOR_1",uint32_t(0x0010u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_COLOR_2",uint32_t(0x0020u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_COLOR_3",uint32_t(0x0040u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_COLOR_4",uint32_t(0x0080u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_COLOR_5",uint32_t(0x0100u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_COLOR_6",uint32_t(0x0200u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_COLOR_7",uint32_t(0x0400u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_DEPTH",uint32_t(0x0800u));
addConstant<uint32_t>(*this,"BGFX_CLEAR_DISCARD_STENCIL",uint32_t(0x1000u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_8X1",uint32_t(0x0001u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_8X2",uint32_t(0x0002u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_8X4",uint32_t(0x0003u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_16X1",uint32_t(0x0004u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_16X2",uint32_t(0x0005u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_16X4",uint32_t(0x0006u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_32X1",uint32_t(0x0007u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_32X2",uint32_t(0x0008u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_32X4",uint32_t(0x0009u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_FORMAT_MASK",uint32_t(0x000fu));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_TYPE_INT",uint32_t(0x0010u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_TYPE_UINT",uint32_t(0x0020u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_TYPE_FLOAT",uint32_t(0x0030u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_TYPE_MASK",uint32_t(0x0030u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_NONE",uint32_t(0x0000u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_READ",uint32_t(0x0100u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_COMPUTE_WRITE",uint32_t(0x0200u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_DRAW_INDIRECT",uint32_t(0x0400u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_ALLOW_RESIZE",uint32_t(0x0800u));
addConstant<uint32_t>(*this,"BGFX_BUFFER_INDEX32",uint32_t(0x1000u));
addConstant<uint32_t>(*this,"BGFX_PCI_ID_NONE",uint32_t(0x0000u));
addConstant<uint32_t>(*this,"BGFX_PCI_ID_SOFTWARE_RASTERIZER",uint32_t(0x0001u));
addConstant<uint32_t>(*this,"BGFX_PCI_ID_AMD",uint32_t(0x1002u));
addConstant<uint32_t>(*this,"BGFX_PCI_ID_INTEL",uint32_t(0x8086u));
addConstant<uint32_t>(*this,"BGFX_PCI_ID_NVIDIA",uint32_t(0x10deu));
addConstant<uint32_t>(*this,"BGFX_STENCIL_FUNC_REF_MASK",uint32_t(0x000000ffu));
addConstant<uint32_t>(*this,"BGFX_STENCIL_FUNC_RMASK_MASK",uint32_t(0x0000ff00u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_NONE",uint32_t(0x00000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_MASK",uint32_t(0xffffffffu));
addConstant<uint32_t>(*this,"BGFX_STENCIL_DEFAULT",uint32_t(0x00000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_TEST_LESS",uint32_t(0x00010000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_TEST_LEQUAL",uint32_t(0x00020000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_TEST_EQUAL",uint32_t(0x00030000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_TEST_GEQUAL",uint32_t(0x00040000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_TEST_GREATER",uint32_t(0x00050000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_TEST_NOTEQUAL",uint32_t(0x00060000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_TEST_NEVER",uint32_t(0x00070000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_TEST_ALWAYS",uint32_t(0x00080000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_TEST_MASK",uint32_t(0x000f0000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_ZERO",uint32_t(0x00000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_KEEP",uint32_t(0x00100000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_REPLACE",uint32_t(0x00200000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_INCR",uint32_t(0x00300000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_INCRSAT",uint32_t(0x00400000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_DECR",uint32_t(0x00500000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_DECRSAT",uint32_t(0x00600000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_INVERT",uint32_t(0x00700000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_S_MASK",uint32_t(0x00f00000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_ZERO",uint32_t(0x00000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_KEEP",uint32_t(0x01000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_REPLACE",uint32_t(0x02000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_INCR",uint32_t(0x03000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_INCRSAT",uint32_t(0x04000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_DECR",uint32_t(0x05000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_DECRSAT",uint32_t(0x06000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_INVERT",uint32_t(0x07000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_FAIL_Z_MASK",uint32_t(0x0f000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_ZERO",uint32_t(0x00000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_KEEP",uint32_t(0x10000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_REPLACE",uint32_t(0x20000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_INCR",uint32_t(0x30000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_INCRSAT",uint32_t(0x40000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_DECR",uint32_t(0x50000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_DECRSAT",uint32_t(0x60000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_INVERT",uint32_t(0x70000000u));
addConstant<uint32_t>(*this,"BGFX_STENCIL_OP_PASS_Z_MASK",uint32_t(0xf0000000u));
addConstant<uint32_t>(*this,"BGFX_DEBUG_NONE",uint32_t(0x00000000u));
addConstant<uint32_t>(*this,"BGFX_DEBUG_WIREFRAME",uint32_t(0x00000001u));
addConstant<uint32_t>(*this,"BGFX_DEBUG_IFH",uint32_t(0x00000002u));
addConstant<uint32_t>(*this,"BGFX_DEBUG_STATS",uint32_t(0x00000004u));
addConstant<uint32_t>(*this,"BGFX_DEBUG_TEXT",uint32_t(0x00000008u));
addConstant<uint32_t>(*this,"BGFX_DEBUG_PROFILER",uint32_t(0x00000010u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_U_MIRROR",uint32_t(0x00000001u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_U_CLAMP",uint32_t(0x00000002u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_U_BORDER",uint32_t(0x00000003u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_U_MASK",uint32_t(0x00000003u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_V_MIRROR",uint32_t(0x00000004u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_V_CLAMP",uint32_t(0x00000008u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_V_BORDER",uint32_t(0x0000000cu));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_V_MASK",uint32_t(0x0000000cu));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_W_MIRROR",uint32_t(0x00000010u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_W_CLAMP",uint32_t(0x00000020u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_W_BORDER",uint32_t(0x00000030u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_W_MASK",uint32_t(0x00000030u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_MIN_POINT",uint32_t(0x00000040u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_MIN_ANISOTROPIC",uint32_t(0x00000080u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_MIN_MASK",uint32_t(0x000000c0u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_MAG_POINT",uint32_t(0x00000100u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_MAG_ANISOTROPIC",uint32_t(0x00000200u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_MAG_MASK",uint32_t(0x00000300u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_MIP_POINT",uint32_t(0x00000400u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_MIP_MASK",uint32_t(0x00000400u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_COMPARE_LESS",uint32_t(0x00010000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_COMPARE_LEQUAL",uint32_t(0x00020000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_COMPARE_EQUAL",uint32_t(0x00030000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_COMPARE_GEQUAL",uint32_t(0x00040000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_COMPARE_GREATER",uint32_t(0x00050000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_COMPARE_NOTEQUAL",uint32_t(0x00060000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_COMPARE_NEVER",uint32_t(0x00070000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_COMPARE_ALWAYS",uint32_t(0x00080000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_COMPARE_MASK",uint32_t(0x000f0000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_BORDER_COLOR_MASK",uint32_t(0x0f000000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_RESERVED_MASK",uint32_t(0xf0000000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_NONE",uint32_t(0x00000000u));
addConstant<uint32_t>(*this,"BGFX_SAMPLER_SAMPLE_STENCIL",uint32_t(0x00100000u));
addConstant<uint32_t>(*this,"BGFX_RESET_MSAA_X2",uint32_t(0x00000010u));
addConstant<uint32_t>(*this,"BGFX_RESET_MSAA_X4",uint32_t(0x00000020u));
addConstant<uint32_t>(*this,"BGFX_RESET_MSAA_X8",uint32_t(0x00000030u));
addConstant<uint32_t>(*this,"BGFX_RESET_MSAA_X16",uint32_t(0x00000040u));
addConstant<uint32_t>(*this,"BGFX_RESET_MSAA_MASK",uint32_t(0x00000070u));
addConstant<uint32_t>(*this,"BGFX_RESET_NONE",uint32_t(0x00000000u));
addConstant<uint32_t>(*this,"BGFX_RESET_FULLSCREEN",uint32_t(0x00000001u));
addConstant<uint32_t>(*this,"BGFX_RESET_VSYNC",uint32_t(0x00000080u));
addConstant<uint32_t>(*this,"BGFX_RESET_MAXANISOTROPY",uint32_t(0x00000100u));
addConstant<uint32_t>(*this,"BGFX_RESET_CAPTURE",uint32_t(0x00000200u));
addConstant<uint32_t>(*this,"BGFX_RESET_FLUSH_AFTER_RENDER",uint32_t(0x00002000u));
addConstant<uint32_t>(*this,"BGFX_RESET_FLIP_AFTER_RENDER",uint32_t(0x00004000u));
addConstant<uint32_t>(*this,"BGFX_RESET_SRGB_BACKBUFFER",uint32_t(0x00008000u));
addConstant<uint32_t>(*this,"BGFX_RESET_HDR10",uint32_t(0x00010000u));
addConstant<uint32_t>(*this,"BGFX_RESET_HIDPI",uint32_t(0x00020000u));
addConstant<uint32_t>(*this,"BGFX_RESET_DEPTH_CLAMP",uint32_t(0x00040000u));
addConstant<uint32_t>(*this,"BGFX_RESET_SUSPEND",uint32_t(0x00080000u));
addConstant<uint32_t>(*this,"BGFX_RESET_FULLSCREEN_MASK",uint32_t(0x00000001u));
addConstant<uint32_t>(*this,"BGFX_RESET_RESERVED_MASK",uint32_t(0x80000000u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_NONE",uint32_t(0x00000000u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_2D",uint32_t(0x00000001u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_2D_SRGB",uint32_t(0x00000002u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_2D_EMULATED",uint32_t(0x00000004u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_3D",uint32_t(0x00000008u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_3D_SRGB",uint32_t(0x00000010u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_3D_EMULATED",uint32_t(0x00000020u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_CUBE",uint32_t(0x00000040u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_CUBE_SRGB",uint32_t(0x00000080u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_CUBE_EMULATED",uint32_t(0x00000100u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_VERTEX",uint32_t(0x00000200u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_IMAGE_READ",uint32_t(0x00000400u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_IMAGE_WRITE",uint32_t(0x00000800u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_FRAMEBUFFER",uint32_t(0x00001000u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_FRAMEBUFFER_MSAA",uint32_t(0x00002000u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_MSAA",uint32_t(0x00004000u));
addConstant<uint32_t>(*this,"BGFX_CAPS_FORMAT_TEXTURE_MIP_AUTOGEN",uint32_t(0x00008000u));
addConstant<uint64_t>(*this,"BGFX_STATE_WRITE_R",uint64_t(0x0000000000000001ul));
addConstant<uint64_t>(*this,"BGFX_STATE_WRITE_G",uint64_t(0x0000000000000002ul));
addConstant<uint64_t>(*this,"BGFX_STATE_WRITE_B",uint64_t(0x0000000000000004ul));
addConstant<uint64_t>(*this,"BGFX_STATE_WRITE_A",uint64_t(0x0000000000000008ul));
addConstant<uint64_t>(*this,"BGFX_STATE_WRITE_Z",uint64_t(0x0000004000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_DEPTH_TEST_LESS",uint64_t(0x0000000000000010ul));
addConstant<uint64_t>(*this,"BGFX_STATE_DEPTH_TEST_LEQUAL",uint64_t(0x0000000000000020ul));
addConstant<uint64_t>(*this,"BGFX_STATE_DEPTH_TEST_EQUAL",uint64_t(0x0000000000000030ul));
addConstant<uint64_t>(*this,"BGFX_STATE_DEPTH_TEST_GEQUAL",uint64_t(0x0000000000000040ul));
addConstant<uint64_t>(*this,"BGFX_STATE_DEPTH_TEST_GREATER",uint64_t(0x0000000000000050ul));
addConstant<uint64_t>(*this,"BGFX_STATE_DEPTH_TEST_NOTEQUAL",uint64_t(0x0000000000000060ul));
addConstant<uint64_t>(*this,"BGFX_STATE_DEPTH_TEST_NEVER",uint64_t(0x0000000000000070ul));
addConstant<uint64_t>(*this,"BGFX_STATE_DEPTH_TEST_ALWAYS",uint64_t(0x0000000000000080ul));
addConstant<uint64_t>(*this,"BGFX_STATE_DEPTH_TEST_MASK",uint64_t(0x00000000000000f0ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_ZERO",uint64_t(0x0000000000001000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_ONE",uint64_t(0x0000000000002000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_SRC_COLOR",uint64_t(0x0000000000003000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_INV_SRC_COLOR",uint64_t(0x0000000000004000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_SRC_ALPHA",uint64_t(0x0000000000005000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_INV_SRC_ALPHA",uint64_t(0x0000000000006000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_DST_ALPHA",uint64_t(0x0000000000007000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_INV_DST_ALPHA",uint64_t(0x0000000000008000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_DST_COLOR",uint64_t(0x0000000000009000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_INV_DST_COLOR",uint64_t(0x000000000000a000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_SRC_ALPHA_SAT",uint64_t(0x000000000000b000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_FACTOR",uint64_t(0x000000000000c000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_INV_FACTOR",uint64_t(0x000000000000d000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_MASK",uint64_t(0x000000000ffff000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_EQUATION_ADD",uint64_t(0x0000000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_EQUATION_SUB",uint64_t(0x0000000010000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_EQUATION_REVSUB",uint64_t(0x0000000020000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_EQUATION_MIN",uint64_t(0x0000000030000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_EQUATION_MAX",uint64_t(0x0000000040000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_EQUATION_MASK",uint64_t(0x00000003f0000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_CULL_CW",uint64_t(0x0000001000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_CULL_CCW",uint64_t(0x0000002000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_CULL_MASK",uint64_t(0x0000003000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_ALPHA_REF_MASK",uint64_t(0x0000ff0000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_PT_TRISTRIP",uint64_t(0x0001000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_PT_LINES",uint64_t(0x0002000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_PT_LINESTRIP",uint64_t(0x0003000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_PT_POINTS",uint64_t(0x0004000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_PT_MASK",uint64_t(0x0007000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_POINT_SIZE_MASK",uint64_t(0x00f0000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_MSAA",uint64_t(0x0100000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_LINEAA",uint64_t(0x0200000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_CONSERVATIVE_RASTER",uint64_t(0x0400000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_NONE",uint64_t(0x0000000000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_FRONT_CCW",uint64_t(0x0000008000000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_INDEPENDENT",uint64_t(0x0000000400000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_BLEND_ALPHA_TO_COVERAGE",uint64_t(0x0000000800000000ul));
addConstant<uint64_t>(*this,"BGFX_STATE_MASK",uint64_t(0xfffffffffffffffful));
addConstant<uint64_t>(*this,"BGFX_STATE_RESERVED_MASK",uint64_t(0xe000000000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_NONE",uint64_t(0x0000000000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_MSAA_SAMPLE",uint64_t(0x0000000800000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_RT",uint64_t(0x0000001000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_COMPUTE_WRITE",uint64_t(0x0000100000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_SRGB",uint64_t(0x0000200000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_BLIT_DST",uint64_t(0x0000400000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_READ_BACK",uint64_t(0x0000800000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_RT_MSAA_X2",uint64_t(0x0000002000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_RT_MSAA_X4",uint64_t(0x0000003000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_RT_MSAA_X8",uint64_t(0x0000004000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_RT_MSAA_X16",uint64_t(0x0000005000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_RT_MSAA_MASK",uint64_t(0x0000007000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_RT_WRITE_ONLY",uint64_t(0x0000008000000000ul));
addConstant<uint64_t>(*this,"BGFX_TEXTURE_RT_MASK",uint64_t(0x000000f000000000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_ALPHA_TO_COVERAGE",uint64_t(0x0000000000000001ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_BLEND_INDEPENDENT",uint64_t(0x0000000000000002ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_COMPUTE",uint64_t(0x0000000000000004ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_CONSERVATIVE_RASTER",uint64_t(0x0000000000000008ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_DRAW_INDIRECT",uint64_t(0x0000000000000010ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_FRAGMENT_DEPTH",uint64_t(0x0000000000000020ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_FRAGMENT_ORDERING",uint64_t(0x0000000000000040ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_GRAPHICS_DEBUGGER",uint64_t(0x0000000000000080ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_HDR10",uint64_t(0x0000000000000100ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_HIDPI",uint64_t(0x0000000000000200ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_IMAGE_RW",uint64_t(0x0000000000000400ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_INDEX32",uint64_t(0x0000000000000800ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_INSTANCING",uint64_t(0x0000000000001000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_OCCLUSION_QUERY",uint64_t(0x0000000000002000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_RENDERER_MULTITHREADED",uint64_t(0x0000000000004000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_SWAP_CHAIN",uint64_t(0x0000000000008000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_TEXTURE_2D_ARRAY",uint64_t(0x0000000000010000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_TEXTURE_3D",uint64_t(0x0000000000020000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_TEXTURE_BLIT",uint64_t(0x0000000000040000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_TEXTURE_COMPARE_RESERVED",uint64_t(0x0000000000080000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_TEXTURE_COMPARE_LEQUAL",uint64_t(0x0000000000100000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_TEXTURE_CUBE_ARRAY",uint64_t(0x0000000000200000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_TEXTURE_DIRECT_ACCESS",uint64_t(0x0000000000400000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_TEXTURE_READ_BACK",uint64_t(0x0000000000800000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_VERTEX_ATTRIB_HALF",uint64_t(0x0000000001000000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_VERTEX_ATTRIB_UINT10",uint64_t(0x0000000002000000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_VERTEX_ID",uint64_t(0x0000000004000000ul));
addConstant<uint64_t>(*this,"BGFX_CAPS_VIEWPORT_LAYER_ARRAY",uint64_t(0x0000000008000000ul));
